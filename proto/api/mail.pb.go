// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mail.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SendMailReq struct {
	Accountid            string    `protobuf:"bytes,1,opt,name=accountid,proto3" json:"accountid,omitempty"`
	Body                 *MailBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SendMailReq) Reset()         { *m = SendMailReq{} }
func (m *SendMailReq) String() string { return proto.CompactTextString(m) }
func (*SendMailReq) ProtoMessage()    {}
func (*SendMailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{0}
}

func (m *SendMailReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMailReq.Unmarshal(m, b)
}
func (m *SendMailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMailReq.Marshal(b, m, deterministic)
}
func (m *SendMailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMailReq.Merge(m, src)
}
func (m *SendMailReq) XXX_Size() int {
	return xxx_messageInfo_SendMailReq.Size(m)
}
func (m *SendMailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMailReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendMailReq proto.InternalMessageInfo

func (m *SendMailReq) GetAccountid() string {
	if m != nil {
		return m.Accountid
	}
	return ""
}

func (m *SendMailReq) GetBody() *MailBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type SendMailRes struct {
	Errcode              int32    `protobuf:"varint,1,opt,name=errcode,proto3" json:"errcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMailRes) Reset()         { *m = SendMailRes{} }
func (m *SendMailRes) String() string { return proto.CompactTextString(m) }
func (*SendMailRes) ProtoMessage()    {}
func (*SendMailRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{1}
}

func (m *SendMailRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMailRes.Unmarshal(m, b)
}
func (m *SendMailRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMailRes.Marshal(b, m, deterministic)
}
func (m *SendMailRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMailRes.Merge(m, src)
}
func (m *SendMailRes) XXX_Size() int {
	return xxx_messageInfo_SendMailRes.Size(m)
}
func (m *SendMailRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMailRes.DiscardUnknown(m)
}

var xxx_messageInfo_SendMailRes proto.InternalMessageInfo

func (m *SendMailRes) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

type MailBody struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Txt                  string   `protobuf:"bytes,2,opt,name=txt,proto3" json:"txt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MailBody) Reset()         { *m = MailBody{} }
func (m *MailBody) String() string { return proto.CompactTextString(m) }
func (*MailBody) ProtoMessage()    {}
func (*MailBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{2}
}

func (m *MailBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MailBody.Unmarshal(m, b)
}
func (m *MailBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MailBody.Marshal(b, m, deterministic)
}
func (m *MailBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailBody.Merge(m, src)
}
func (m *MailBody) XXX_Size() int {
	return xxx_messageInfo_MailBody.Size(m)
}
func (m *MailBody) XXX_DiscardUnknown() {
	xxx_messageInfo_MailBody.DiscardUnknown(m)
}

var xxx_messageInfo_MailBody proto.InternalMessageInfo

func (m *MailBody) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MailBody) GetTxt() string {
	if m != nil {
		return m.Txt
	}
	return ""
}

func init() {
	proto.RegisterType((*SendMailReq)(nil), "api.sendMailReq")
	proto.RegisterType((*SendMailRes)(nil), "api.sendMailRes")
	proto.RegisterType((*MailBody)(nil), "api.MailBody")
}

func init() { proto.RegisterFile("mail.proto", fileDescriptor_7cda5f053e74676b) }

var fileDescriptor_7cda5f053e74676b = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xb1, 0x0e, 0x82, 0x30,
	0x18, 0x84, 0x45, 0x40, 0xe5, 0x27, 0x26, 0xe4, 0x8f, 0x03, 0x31, 0x0e, 0xd8, 0x45, 0x06, 0xc3,
	0x80, 0x3e, 0x81, 0xbb, 0x0e, 0x7d, 0x83, 0x42, 0x3b, 0x34, 0x41, 0x8a, 0xb4, 0x26, 0xf2, 0xf6,
	0xa6, 0x55, 0x22, 0x71, 0xeb, 0x5d, 0x73, 0x77, 0xdf, 0x0f, 0x70, 0x67, 0xb2, 0x29, 0xba, 0x5e,
	0x19, 0x85, 0x3e, 0xeb, 0x24, 0xb9, 0x41, 0xac, 0x45, 0xcb, 0xaf, 0x4c, 0x36, 0x54, 0x3c, 0x70,
	0x07, 0x11, 0xab, 0x6b, 0xf5, 0x6c, 0x8d, 0xe4, 0xa9, 0x97, 0x79, 0x79, 0x44, 0x7f, 0x06, 0xee,
	0x21, 0xa8, 0x14, 0x1f, 0xd2, 0x79, 0xe6, 0xe5, 0x71, 0xb9, 0x2e, 0x58, 0x27, 0x0b, 0x9b, 0xbc,
	0x28, 0x3e, 0x50, 0xf7, 0x45, 0x0e, 0xd3, 0x3e, 0x8d, 0x29, 0x2c, 0x45, 0xdf, 0xd7, 0x8a, 0x0b,
	0xd7, 0x16, 0xd2, 0x51, 0x92, 0x12, 0x56, 0x63, 0x14, 0x37, 0x10, 0x1a, 0x69, 0x1a, 0xf1, 0x5d,
	0xfc, 0x08, 0x4c, 0xc0, 0x37, 0x2f, 0xe3, 0xc6, 0x22, 0x6a, 0x9f, 0xe5, 0x19, 0x02, 0xcb, 0x8f,
	0x47, 0x08, 0xec, 0x08, 0x26, 0x8e, 0x60, 0xc2, 0xbf, 0xfd, 0x77, 0x34, 0x99, 0x55, 0x0b, 0x77,
	0xee, 0xe9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x03, 0x3d, 0x86, 0xfc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MailClient is the client API for Mail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MailClient interface {
	Send(ctx context.Context, in *SendMailReq, opts ...grpc.CallOption) (*SendMailRes, error)
}

type mailClient struct {
	cc *grpc.ClientConn
}

func NewMailClient(cc *grpc.ClientConn) MailClient {
	return &mailClient{cc}
}

func (c *mailClient) Send(ctx context.Context, in *SendMailReq, opts ...grpc.CallOption) (*SendMailRes, error) {
	out := new(SendMailRes)
	err := c.cc.Invoke(ctx, "/api.mail/send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailServer is the server API for Mail service.
type MailServer interface {
	Send(context.Context, *SendMailReq) (*SendMailRes, error)
}

// UnimplementedMailServer can be embedded to have forward compatible implementations.
type UnimplementedMailServer struct {
}

func (*UnimplementedMailServer) Send(ctx context.Context, req *SendMailReq) (*SendMailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterMailServer(s *grpc.Server, srv MailServer) {
	s.RegisterService(&_Mail_serviceDesc, srv)
}

func _Mail_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.mail/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).Send(ctx, req.(*SendMailReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.mail",
	HandlerType: (*MailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send",
			Handler:    _Mail_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail.proto",
}
