// Code generated by protoc-gen-go. DO NOT EDIT.
// source: base.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AccRenameReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Nickname             string   `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccRenameReq) Reset()         { *m = AccRenameReq{} }
func (m *AccRenameReq) String() string { return proto.CompactTextString(m) }
func (*AccRenameReq) ProtoMessage()    {}
func (*AccRenameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{0}
}

func (m *AccRenameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccRenameReq.Unmarshal(m, b)
}
func (m *AccRenameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccRenameReq.Marshal(b, m, deterministic)
}
func (m *AccRenameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccRenameReq.Merge(m, src)
}
func (m *AccRenameReq) XXX_Size() int {
	return xxx_messageInfo_AccRenameReq.Size(m)
}
func (m *AccRenameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AccRenameReq.DiscardUnknown(m)
}

var xxx_messageInfo_AccRenameReq proto.InternalMessageInfo

func (m *AccRenameReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AccRenameReq) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

type AccRenameRes struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccRenameRes) Reset()         { *m = AccRenameRes{} }
func (m *AccRenameRes) String() string { return proto.CompactTextString(m) }
func (*AccRenameRes) ProtoMessage()    {}
func (*AccRenameRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{1}
}

func (m *AccRenameRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccRenameRes.Unmarshal(m, b)
}
func (m *AccRenameRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccRenameRes.Marshal(b, m, deterministic)
}
func (m *AccRenameRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccRenameRes.Merge(m, src)
}
func (m *AccRenameRes) XXX_Size() int {
	return xxx_messageInfo_AccRenameRes.Size(m)
}
func (m *AccRenameRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AccRenameRes.DiscardUnknown(m)
}

var xxx_messageInfo_AccRenameRes proto.InternalMessageInfo

func (m *AccRenameRes) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func init() {
	proto.RegisterType((*AccRenameReq)(nil), "api.accRenameReq")
	proto.RegisterType((*AccRenameRes)(nil), "api.accRenameRes")
}

func init() { proto.RegisterFile("base.proto", fileDescriptor_db1b6b0986796150) }

var fileDescriptor_db1b6b0986796150 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4a, 0x2c, 0x4e,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x72, 0xe0, 0xe2, 0x49,
	0x4c, 0x4e, 0x0e, 0x4a, 0xcd, 0x4b, 0xcc, 0x4d, 0x0d, 0x4a, 0x2d, 0x14, 0x12, 0xe1, 0x62, 0x0d,
	0xc9, 0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0xa4, 0xb8,
	0x38, 0xfc, 0x32, 0x93, 0xb3, 0x41, 0x8a, 0x24, 0x98, 0xc0, 0x12, 0x70, 0xbe, 0x92, 0x16, 0x8a,
	0x09, 0xc5, 0x28, 0x6a, 0x19, 0x51, 0xd5, 0x1a, 0xd9, 0x70, 0xb1, 0x80, 0x1c, 0x20, 0x64, 0xc2,
	0xc5, 0x95, 0x98, 0x9c, 0x1c, 0x5f, 0x04, 0xd6, 0x24, 0x24, 0xa8, 0x97, 0x58, 0x90, 0xa9, 0x87,
	0xec, 0x0c, 0x29, 0x0c, 0xa1, 0x62, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xbb, 0x8d, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xd0, 0x41, 0xbc, 0x09, 0xc5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BaseClient is the client API for Base service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BaseClient interface {
	AccRename(ctx context.Context, in *AccRenameReq, opts ...grpc.CallOption) (*AccRenameRes, error)
}

type baseClient struct {
	cc *grpc.ClientConn
}

func NewBaseClient(cc *grpc.ClientConn) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) AccRename(ctx context.Context, in *AccRenameReq, opts ...grpc.CallOption) (*AccRenameRes, error) {
	out := new(AccRenameRes)
	err := c.cc.Invoke(ctx, "/api.base/acc_rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServer is the server API for Base service.
type BaseServer interface {
	AccRename(context.Context, *AccRenameReq) (*AccRenameRes, error)
}

// UnimplementedBaseServer can be embedded to have forward compatible implementations.
type UnimplementedBaseServer struct {
}

func (*UnimplementedBaseServer) AccRename(ctx context.Context, req *AccRenameReq) (*AccRenameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccRename not implemented")
}

func RegisterBaseServer(s *grpc.Server, srv BaseServer) {
	s.RegisterService(&_Base_serviceDesc, srv)
}

func _Base_AccRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccRenameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).AccRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.base/AccRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).AccRename(ctx, req.(*AccRenameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Base_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "acc_rename",
			Handler:    _Base_AccRename_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base.proto",
}
